
-- Thanks for XHDL
--/////////////////////////////////////////////////////////////////
--////                                    //////
--/////////////////////////////////////////////////////////////////
--/                                                             ///
--/ This file is generated by Viterbi HDL Code Generator(VHCG)  ///
--/ which is written by Mike Johnson at OpenCores.org  and      ///
--/ distributed under GPL license.                              ///
--/                                                             ///
--/ If you have any advice,                                     ///
--/ please email to jhonson.zhu@gmail.com                       ///
--/                                                             ///
--/////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////
--////                                    //////
--/////////////////////////////////////////////////////////////////
--/                                                             ///
--/ This file is generated by Viterbi HDL Code Generator(VHCG)  ///
--/ which is written by Mike Johnson at OpenCores.org  and      ///
--/ distributed under GPL license.                              ///
--/                                                             ///
--/ If you have any advice,                                     ///
--/ please email to jhonson.zhu@gmail.com                       ///
--/                                                             ///
--/////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////

LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.std_logic_unsigned.all;
ENTITY vit IS
   PORT (
      mclk                    : IN std_logic;
      rst                     : IN std_logic;
      valid                   : IN std_logic;
      symbol0                 : IN std_logic_vector(3 - 1 DOWNTO 0);
      symbol1                 : IN std_logic_vector(3 - 1 DOWNTO 0);
      pattern                 : IN std_logic_vector(2 - 1 DOWNTO 0);
      dec0                    : OUT std_logic;
      dec1                    : OUT std_logic;
      dec2                    : OUT std_logic;
      dec3                    : OUT std_logic;
      dec4                    : OUT std_logic;
      dec5                    : OUT std_logic;
      dec6                    : OUT std_logic;
      dec7                    : OUT std_logic;
      dec8                    : OUT std_logic;
      dec9                    : OUT std_logic;
      dec10                   : OUT std_logic;
      dec11                   : OUT std_logic;
      dec12                   : OUT std_logic;
      dec13                   : OUT std_logic;
      dec14                   : OUT std_logic;
      dec15                   : OUT std_logic;
      dec16                   : OUT std_logic;
      dec17                   : OUT std_logic;
      dec18                   : OUT std_logic;
      dec19                   : OUT std_logic;
      dec20                   : OUT std_logic;
      dec21                   : OUT std_logic;
      dec22                   : OUT std_logic;
      dec23                   : OUT std_logic;
      dec24                   : OUT std_logic;
      dec25                   : OUT std_logic;
      dec26                   : OUT std_logic;
      dec27                   : OUT std_logic;
      dec28                   : OUT std_logic;
      dec29                   : OUT std_logic;
      dec30                   : OUT std_logic;
      dec31                   : OUT std_logic;
      valid_decs              : OUT std_logic);
END vit;

ARCHITECTURE translated OF vit IS

   COMPONENT ctrl
      PORT (
         mclk                    : IN  std_logic;
         rst                     : IN  std_logic;
         valid                   : IN  std_logic;
         symbol0                 : IN  std_logic_vector(3 - 1 DOWNTO 0);
         symbol1                 : IN  std_logic_vector(3 - 1 DOWNTO 0);
         pattern                 : IN  std_logic_vector(2 - 1 DOWNTO 0);
         valid_slice             : OUT std_logic;
         slice                   : OUT std_logic;
         shift_cnt               : OUT std_logic;
         adr0_shift              : OUT std_logic;
         adr1_shift              : OUT std_logic;
         reg_symbol0             : OUT std_logic_vector(3 - 1 DOWNTO 0);
         reg_symbol1             : OUT std_logic_vector(3 - 1 DOWNTO 0);
         reg_pattern             : OUT std_logic_vector(2 - 1 DOWNTO 0);
         valid_decs              : OUT std_logic);
   END COMPONENT;

   COMPONENT pe
      GENERIC (
          PE_ID                          :  integer := 0);
      PORT (
         mclk                    : IN  std_logic;
         rst                     : IN  std_logic;
         valid                   : IN  std_logic;
         slice                   : IN  std_logic;
         shift_cnt               : IN  std_logic;
         adr0_shift              : IN  std_logic;
         adr1_shift              : IN  std_logic;
         symbol0                 : IN  std_logic_vector(3 - 1 DOWNTO 0);
         symbol1                 : IN  std_logic_vector(3 - 1 DOWNTO 0);
         pattern                 : IN  std_logic_vector(2 - 1 DOWNTO 0);
         in_sm0                  : IN  std_logic_vector(8 - 1 DOWNTO 0);
         in_sm1                  : IN  std_logic_vector(8 - 1 DOWNTO 0);
         out_sm0                 : OUT std_logic_vector(8 - 1 DOWNTO 0);
         out_sm1                 : OUT std_logic_vector(8 - 1 DOWNTO 0);
         dec0                    : OUT std_logic;
         dec1                    : OUT std_logic);
   END COMPONENT;


   SIGNAL pe0_dec0                 :  std_logic;
   SIGNAL pe0_dec1                 :  std_logic;
   SIGNAL pe1_dec0                 :  std_logic;
   SIGNAL pe1_dec1                 :  std_logic;
   SIGNAL pe2_dec0                 :  std_logic;
   SIGNAL pe2_dec1                 :  std_logic;
   SIGNAL pe3_dec0                 :  std_logic;
   SIGNAL pe3_dec1                 :  std_logic;
   SIGNAL pe4_dec0                 :  std_logic;
   SIGNAL pe4_dec1                 :  std_logic;
   SIGNAL pe5_dec0                 :  std_logic;
   SIGNAL pe5_dec1                 :  std_logic;
   SIGNAL pe6_dec0                 :  std_logic;
   SIGNAL pe6_dec1                 :  std_logic;
   SIGNAL pe7_dec0                 :  std_logic;
   SIGNAL pe7_dec1                 :  std_logic;
   SIGNAL pe8_dec0                 :  std_logic;
   SIGNAL pe8_dec1                 :  std_logic;
   SIGNAL pe9_dec0                 :  std_logic;
   SIGNAL pe9_dec1                 :  std_logic;
   SIGNAL pe10_dec0                :  std_logic;
   SIGNAL pe10_dec1                :  std_logic;
   SIGNAL pe11_dec0                :  std_logic;
   SIGNAL pe11_dec1                :  std_logic;
   SIGNAL pe12_dec0                :  std_logic;
   SIGNAL pe12_dec1                :  std_logic;
   SIGNAL pe13_dec0                :  std_logic;
   SIGNAL pe13_dec1                :  std_logic;
   SIGNAL pe14_dec0                :  std_logic;
   SIGNAL pe14_dec1                :  std_logic;
   SIGNAL pe15_dec0                :  std_logic;
   SIGNAL pe15_dec1                :  std_logic;
   SIGNAL valid_slice              :  std_logic;
   SIGNAL slice                    :  std_logic;
   SIGNAL reg_symbol0              :  std_logic_vector(3 - 1 DOWNTO 0);
   SIGNAL reg_symbol1              :  std_logic_vector(3 - 1 DOWNTO 0);
   SIGNAL reg_pattern              :  std_logic_vector(2 - 1 DOWNTO 0);
   SIGNAL shift_cnt                :  std_logic;
   SIGNAL adr0_shift               :  std_logic;
   SIGNAL adr1_shift               :  std_logic;
   SIGNAL pe0_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe0_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe0_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe0_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe1_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe1_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe1_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe1_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe2_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe2_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe2_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe2_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe3_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe3_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe3_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe3_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe4_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe4_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe4_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe4_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe5_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe5_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe5_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe5_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe6_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe6_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe6_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe6_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe7_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe7_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe7_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe7_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe8_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe8_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe8_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe8_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe9_in_sm0               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe9_in_sm1               :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe9_out_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe9_out_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe10_in_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe10_in_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe10_out_sm0             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe10_out_sm1             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe11_in_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe11_in_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe11_out_sm0             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe11_out_sm1             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe12_in_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe12_in_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe12_out_sm0             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe12_out_sm1             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe13_in_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe13_in_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe13_out_sm0             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe13_out_sm1             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe14_in_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe14_in_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe14_out_sm0             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe14_out_sm1             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe15_in_sm0              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe15_in_sm1              :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe15_out_sm0             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL pe15_out_sm1             :  std_logic_vector(8 - 1 DOWNTO 0);
   SIGNAL dec0_vhcg1               :  std_logic;
   SIGNAL dec1_vhcg2               :  std_logic;
   SIGNAL dec2_vhcg3               :  std_logic;
   SIGNAL dec3_vhcg4               :  std_logic;
   SIGNAL dec4_vhcg5               :  std_logic;
   SIGNAL dec5_vhcg6               :  std_logic;
   SIGNAL dec6_vhcg7               :  std_logic;
   SIGNAL dec7_vhcg8               :  std_logic;
   SIGNAL dec8_vhcg9               :  std_logic;
   SIGNAL dec9_vhcg10              :  std_logic;
   SIGNAL dec10_vhcg11             :  std_logic;
   SIGNAL dec11_vhcg12             :  std_logic;
   SIGNAL dec12_vhcg13             :  std_logic;
   SIGNAL dec13_vhcg14             :  std_logic;
   SIGNAL dec14_vhcg15             :  std_logic;
   SIGNAL dec15_vhcg16             :  std_logic;
   SIGNAL dec16_vhcg17             :  std_logic;
   SIGNAL dec17_vhcg18             :  std_logic;
   SIGNAL dec18_vhcg19             :  std_logic;
   SIGNAL dec19_vhcg20             :  std_logic;
   SIGNAL dec20_vhcg21             :  std_logic;
   SIGNAL dec21_vhcg22             :  std_logic;
   SIGNAL dec22_vhcg23             :  std_logic;
   SIGNAL dec23_vhcg24             :  std_logic;
   SIGNAL dec24_vhcg25             :  std_logic;
   SIGNAL dec25_vhcg26             :  std_logic;
   SIGNAL dec26_vhcg27             :  std_logic;
   SIGNAL dec27_vhcg28             :  std_logic;
   SIGNAL dec28_vhcg29             :  std_logic;
   SIGNAL dec29_vhcg30             :  std_logic;
   SIGNAL dec30_vhcg31             :  std_logic;
   SIGNAL dec31_vhcg32             :  std_logic;
   SIGNAL valid_decs_vhcg33        :  std_logic;

BEGIN
   dec0 <= dec0_vhcg1;
   dec1 <= dec1_vhcg2;
   dec2 <= dec2_vhcg3;
   dec3 <= dec3_vhcg4;
   dec4 <= dec4_vhcg5;
   dec5 <= dec5_vhcg6;
   dec6 <= dec6_vhcg7;
   dec7 <= dec7_vhcg8;
   dec8 <= dec8_vhcg9;
   dec9 <= dec9_vhcg10;
   dec10 <= dec10_vhcg11;
   dec11 <= dec11_vhcg12;
   dec12 <= dec12_vhcg13;
   dec13 <= dec13_vhcg14;
   dec14 <= dec14_vhcg15;
   dec15 <= dec15_vhcg16;
   dec16 <= dec16_vhcg17;
   dec17 <= dec17_vhcg18;
   dec18 <= dec18_vhcg19;
   dec19 <= dec19_vhcg20;
   dec20 <= dec20_vhcg21;
   dec21 <= dec21_vhcg22;
   dec22 <= dec22_vhcg23;
   dec23 <= dec23_vhcg24;
   dec24 <= dec24_vhcg25;
   dec25 <= dec25_vhcg26;
   dec26 <= dec26_vhcg27;
   dec27 <= dec27_vhcg28;
   dec28 <= dec28_vhcg29;
   dec29 <= dec29_vhcg30;
   dec30 <= dec30_vhcg31;
   dec31 <= dec31_vhcg32;
   valid_decs <= valid_decs_vhcg33;
   dec0_vhcg1 <= pe0_dec0 ;
   dec1_vhcg2 <= pe0_dec1 ;
   dec2_vhcg3 <= pe1_dec0 ;
   dec3_vhcg4 <= pe1_dec1 ;
   dec4_vhcg5 <= pe2_dec0 ;
   dec5_vhcg6 <= pe2_dec1 ;
   dec6_vhcg7 <= pe3_dec0 ;
   dec7_vhcg8 <= pe3_dec1 ;
   dec8_vhcg9 <= pe4_dec0 ;
   dec9_vhcg10 <= pe4_dec1 ;
   dec10_vhcg11 <= pe5_dec0 ;
   dec11_vhcg12 <= pe5_dec1 ;
   dec12_vhcg13 <= pe6_dec0 ;
   dec13_vhcg14 <= pe6_dec1 ;
   dec14_vhcg15 <= pe7_dec0 ;
   dec15_vhcg16 <= pe7_dec1 ;
   dec16_vhcg17 <= pe8_dec0 ;
   dec17_vhcg18 <= pe8_dec1 ;
   dec18_vhcg19 <= pe9_dec0 ;
   dec19_vhcg20 <= pe9_dec1 ;
   dec20_vhcg21 <= pe10_dec0 ;
   dec21_vhcg22 <= pe10_dec1 ;
   dec22_vhcg23 <= pe11_dec0 ;
   dec23_vhcg24 <= pe11_dec1 ;
   dec24_vhcg25 <= pe12_dec0 ;
   dec25_vhcg26 <= pe12_dec1 ;
   dec26_vhcg27 <= pe13_dec0 ;
   dec27_vhcg28 <= pe13_dec1 ;
   dec28_vhcg29 <= pe14_dec0 ;
   dec29_vhcg30 <= pe14_dec1 ;
   dec30_vhcg31 <= pe15_dec0 ;
   dec31_vhcg32 <= pe15_dec1 ;
   pe0_in_sm0 <= pe0_out_sm0 ;
   pe0_in_sm1 <= pe1_out_sm0 ;
   pe1_in_sm0 <= pe2_out_sm0 ;
   pe1_in_sm1 <= pe3_out_sm0 ;
   pe2_in_sm0 <= pe4_out_sm0 ;
   pe2_in_sm1 <= pe5_out_sm0 ;
   pe3_in_sm0 <= pe6_out_sm0 ;
   pe3_in_sm1 <= pe7_out_sm0 ;
   pe4_in_sm0 <= pe8_out_sm0 ;
   pe4_in_sm1 <= pe9_out_sm0 ;
   pe5_in_sm0 <= pe10_out_sm0 ;
   pe5_in_sm1 <= pe11_out_sm0 ;
   pe6_in_sm0 <= pe12_out_sm0 ;
   pe6_in_sm1 <= pe13_out_sm0 ;
   pe7_in_sm0 <= pe14_out_sm0 ;
   pe7_in_sm1 <= pe15_out_sm0 ;
   pe8_in_sm0 <= pe0_out_sm1 ;
   pe8_in_sm1 <= pe1_out_sm1 ;
   pe9_in_sm0 <= pe2_out_sm1 ;
   pe9_in_sm1 <= pe3_out_sm1 ;
   pe10_in_sm0 <= pe4_out_sm1 ;
   pe10_in_sm1 <= pe5_out_sm1 ;
   pe11_in_sm0 <= pe6_out_sm1 ;
   pe11_in_sm1 <= pe7_out_sm1 ;
   pe12_in_sm0 <= pe8_out_sm1 ;
   pe12_in_sm1 <= pe9_out_sm1 ;
   pe13_in_sm0 <= pe10_out_sm1 ;
   pe13_in_sm1 <= pe11_out_sm1 ;
   pe14_in_sm0 <= pe12_out_sm1 ;
   pe14_in_sm1 <= pe13_out_sm1 ;
   pe15_in_sm0 <= pe14_out_sm1 ;
   pe15_in_sm1 <= pe15_out_sm1 ;
   pe_0 : pe
      GENERIC MAP (
         PE_ID => 0)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe0_in_sm0,
         in_sm1 => pe0_in_sm1,
         out_sm0 => pe0_out_sm0,
         out_sm1 => pe0_out_sm1,
         dec0 => pe0_dec0,
         dec1 => pe0_dec1);

   pe_1 : pe
      GENERIC MAP (
         PE_ID => 1)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe1_in_sm0,
         in_sm1 => pe1_in_sm1,
         out_sm0 => pe1_out_sm0,
         out_sm1 => pe1_out_sm1,
         dec0 => pe1_dec0,
         dec1 => pe1_dec1);

   pe_2 : pe
      GENERIC MAP (
         PE_ID => 2)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe2_in_sm0,
         in_sm1 => pe2_in_sm1,
         out_sm0 => pe2_out_sm0,
         out_sm1 => pe2_out_sm1,
         dec0 => pe2_dec0,
         dec1 => pe2_dec1);

   pe_3 : pe
      GENERIC MAP (
         PE_ID => 3)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe3_in_sm0,
         in_sm1 => pe3_in_sm1,
         out_sm0 => pe3_out_sm0,
         out_sm1 => pe3_out_sm1,
         dec0 => pe3_dec0,
         dec1 => pe3_dec1);

   pe_4 : pe
      GENERIC MAP (
         PE_ID => 4)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe4_in_sm0,
         in_sm1 => pe4_in_sm1,
         out_sm0 => pe4_out_sm0,
         out_sm1 => pe4_out_sm1,
         dec0 => pe4_dec0,
         dec1 => pe4_dec1);

   pe_5 : pe
      GENERIC MAP (
         PE_ID => 5)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe5_in_sm0,
         in_sm1 => pe5_in_sm1,
         out_sm0 => pe5_out_sm0,
         out_sm1 => pe5_out_sm1,
         dec0 => pe5_dec0,
         dec1 => pe5_dec1);

   pe_6 : pe
      GENERIC MAP (
         PE_ID => 6)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe6_in_sm0,
         in_sm1 => pe6_in_sm1,
         out_sm0 => pe6_out_sm0,
         out_sm1 => pe6_out_sm1,
         dec0 => pe6_dec0,
         dec1 => pe6_dec1);

   pe_7 : pe
      GENERIC MAP (
         PE_ID => 7)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe7_in_sm0,
         in_sm1 => pe7_in_sm1,
         out_sm0 => pe7_out_sm0,
         out_sm1 => pe7_out_sm1,
         dec0 => pe7_dec0,
         dec1 => pe7_dec1);

   pe_8 : pe
      GENERIC MAP (
         PE_ID => 8)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe8_in_sm0,
         in_sm1 => pe8_in_sm1,
         out_sm0 => pe8_out_sm0,
         out_sm1 => pe8_out_sm1,
         dec0 => pe8_dec0,
         dec1 => pe8_dec1);

   pe_9 : pe
      GENERIC MAP (
         PE_ID => 9)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe9_in_sm0,
         in_sm1 => pe9_in_sm1,
         out_sm0 => pe9_out_sm0,
         out_sm1 => pe9_out_sm1,
         dec0 => pe9_dec0,
         dec1 => pe9_dec1);

   pe_10 : pe
      GENERIC MAP (
         PE_ID => 10)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe10_in_sm0,
         in_sm1 => pe10_in_sm1,
         out_sm0 => pe10_out_sm0,
         out_sm1 => pe10_out_sm1,
         dec0 => pe10_dec0,
         dec1 => pe10_dec1);

   pe_11 : pe
      GENERIC MAP (
         PE_ID => 11)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe11_in_sm0,
         in_sm1 => pe11_in_sm1,
         out_sm0 => pe11_out_sm0,
         out_sm1 => pe11_out_sm1,
         dec0 => pe11_dec0,
         dec1 => pe11_dec1);

   pe_12 : pe
      GENERIC MAP (
         PE_ID => 12)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe12_in_sm0,
         in_sm1 => pe12_in_sm1,
         out_sm0 => pe12_out_sm0,
         out_sm1 => pe12_out_sm1,
         dec0 => pe12_dec0,
         dec1 => pe12_dec1);

   pe_13 : pe
      GENERIC MAP (
         PE_ID => 13)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe13_in_sm0,
         in_sm1 => pe13_in_sm1,
         out_sm0 => pe13_out_sm0,
         out_sm1 => pe13_out_sm1,
         dec0 => pe13_dec0,
         dec1 => pe13_dec1);

   pe_14 : pe
      GENERIC MAP (
         PE_ID => 14)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe14_in_sm0,
         in_sm1 => pe14_in_sm1,
         out_sm0 => pe14_out_sm0,
         out_sm1 => pe14_out_sm1,
         dec0 => pe14_dec0,
         dec1 => pe14_dec1);

   pe_15 : pe
      GENERIC MAP (
         PE_ID => 15)
      PORT MAP (
         mclk => mclk,
         rst => rst,
         slice => slice,
         valid => valid_slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         symbol0 => reg_symbol0,
         symbol1 => reg_symbol1,
         pattern => reg_pattern,
         in_sm0 => pe15_in_sm0,
         in_sm1 => pe15_in_sm1,
         out_sm0 => pe15_out_sm0,
         out_sm1 => pe15_out_sm1,
         dec0 => pe15_dec0,
         dec1 => pe15_dec1);

   ctrl_i : ctrl
      PORT MAP (
         mclk => mclk,
         rst => rst,
         valid => valid,
         symbol0 => symbol0,
         symbol1 => symbol1,
         pattern => pattern,
         valid_slice => valid_slice,
         slice => slice,
         shift_cnt => shift_cnt,
         adr0_shift => adr0_shift,
         adr1_shift => adr1_shift,
         reg_symbol0 => reg_symbol0,
         reg_symbol1 => reg_symbol1,
         reg_pattern => reg_pattern,
         valid_decs => valid_decs_vhcg33);


END translated;
