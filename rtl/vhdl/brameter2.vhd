
-- Thanks for XHDL
--/////////////////////////////////////////////////////////////////
--////                                    //////
--/////////////////////////////////////////////////////////////////
--/                                                             ///
--/ This file is generated by Viterbi HDL Code Generator(VHCG)  ///
--/ which is written by Mike Johnson at OpenCores.org  and      ///
--/ distributed under GPL license.                              ///
--/                                                             ///
--/ If you have any advice,                                     ///
--/ please email to jhonson.zhu@gmail.com                       ///
--/                                                             ///
--/////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////
--This is a head
--/////////////////////////////////////////////////////////////////
--////                                    //////
--/////////////////////////////////////////////////////////////////
--/                                                             ///
--/ This file is generated by Viterbi HDL Code Generator(VHCG)  ///
--/ which is written by Mike Johnson at OpenCores.org  and      ///
--/ distributed under GPL license.                              ///
--/                                                             ///
--/ If you have any advice,                                     ///
--/ please email to jhonson.zhu@gmail.com                       ///
--/                                                             ///
--/////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////

--/////////////////////////////////////////////////////////////////

LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.std_logic_unsigned.all;

ENTITY brameter2 IS
   GENERIC (
      Bit_Width                      :  integer := 3;
      BM_Width                       :  integer := 4);
   PORT (
      state_cluster           : IN std_logic_vector(4 DOWNTO 0);
      symbol0                 : IN std_logic_vector(Bit_Width - 1 DOWNTO 0);
      symbol1                 : IN std_logic_vector(Bit_Width - 1 DOWNTO 0);
      pattern                 : IN std_logic_vector(2 - 1 DOWNTO 0);
      bm00                    : OUT std_logic_vector(BM_Width - 1 DOWNTO 0);
      bm01                    : OUT std_logic_vector(BM_Width - 1 DOWNTO 0);
      bm10                    : OUT std_logic_vector(BM_Width - 1 DOWNTO 0);
      bm11                    : OUT std_logic_vector(BM_Width - 1 DOWNTO 0));
END brameter2;

ARCHITECTURE translated OF brameter2 IS


   SIGNAL bm00_0                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL bm00_1                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL bm01_0                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL bm01_1                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL bm10_0                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL bm10_1                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL bm11_0                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL bm11_1                   :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm00_0                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm00_1                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm01_0                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm01_1                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm10_0                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm10_1                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm11_0                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL pn_bm11_1                :  std_logic_vector(Bit_Width - 1 DOWNTO 0);
   SIGNAL common_part              :  std_logic_vector(1 DOWNTO 0);
   SIGNAL a                        :  std_logic_vector(6 DOWNTO 0);
   SIGNAL bm00_vhcg1               :  std_logic_vector(BM_Width - 1 DOWNTO 0);
   SIGNAL bm01_vhcg2               :  std_logic_vector(BM_Width - 1 DOWNTO 0);
   SIGNAL bm10_vhcg3               :  std_logic_vector(BM_Width - 1 DOWNTO 0);
   SIGNAL bm11_vhcg4               :  std_logic_vector(BM_Width - 1 DOWNTO 0);

BEGIN
   bm00 <= bm00_vhcg1;
   bm01 <= bm01_vhcg2;
   bm10 <= bm10_vhcg3;
   bm11 <= bm11_vhcg4;
   a <= '0' & state_cluster & '0' ;
   common_part(0) <= (a(4) XOR a(3)) XOR a(1) ;
   common_part(1) <= (a(5) XOR a(4)) XOR a(3) ;

   PROCESS (common_part, pattern, symbol0, symbol1)
      VARIABLE bm00_0_vhcg5  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE bm01_0_vhcg6  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE bm10_0_vhcg7  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE bm11_0_vhcg8  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE bm00_1_vhcg9  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE bm01_1_vhcg10  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE bm10_1_vhcg11  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE bm11_1_vhcg12  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm00_0_vhcg13  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm01_0_vhcg14  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm10_0_vhcg15  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm11_0_vhcg16  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm00_1_vhcg17  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm01_1_vhcg18  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm10_1_vhcg19  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
      VARIABLE pn_bm11_1_vhcg20  : std_logic_vector(Bit_Width - 1 DOWNTO 0);
   BEGIN
      IF (common_part(0) = '1') THEN
         bm00_0_vhcg5 := NOT symbol0;
         bm01_0_vhcg6 := symbol0;
         bm10_0_vhcg7 := symbol0;
         bm11_0_vhcg8 := NOT symbol0;
      ELSE
         bm00_0_vhcg5 := symbol0;
         bm01_0_vhcg6 := NOT symbol0;
         bm10_0_vhcg7 := NOT symbol0;
         bm11_0_vhcg8 := symbol0;
      END IF;
      IF (common_part(1) = '1') THEN
         bm00_1_vhcg9 := NOT symbol1;
         bm01_1_vhcg10 := symbol1;
         bm10_1_vhcg11 := symbol1;
         bm11_1_vhcg12 := NOT symbol1;
      ELSE
         bm00_1_vhcg9 := symbol1;
         bm01_1_vhcg10 := NOT symbol1;
         bm10_1_vhcg11 := NOT symbol1;
         bm11_1_vhcg12 := symbol1;
      END IF;
      IF (pattern(0) = '1') THEN
         pn_bm00_0_vhcg13 := bm00_0_vhcg5;
         pn_bm01_0_vhcg14 := bm01_0_vhcg6;
         pn_bm10_0_vhcg15 := bm10_0_vhcg7;
         pn_bm11_0_vhcg16 := bm11_0_vhcg8;
      ELSE
         pn_bm00_0_vhcg13 := (OTHERS => '0');
         pn_bm01_0_vhcg14 := (OTHERS => '0');
         pn_bm10_0_vhcg15 := (OTHERS => '0');
         pn_bm11_0_vhcg16 := (OTHERS => '0');
      END IF;
      IF (pattern(1) = '1') THEN
         pn_bm00_1_vhcg17 := bm00_1_vhcg9;
         pn_bm01_1_vhcg18 := bm01_1_vhcg10;
         pn_bm10_1_vhcg19 := bm10_1_vhcg11;
         pn_bm11_1_vhcg20 := bm11_1_vhcg12;
      ELSE
         pn_bm00_1_vhcg17 := (OTHERS => '0');
         pn_bm01_1_vhcg18 := (OTHERS => '0');
         pn_bm10_1_vhcg19 := (OTHERS => '0');
         pn_bm11_1_vhcg20 := (OTHERS => '0');
      END IF;
      bm00_0 <= bm00_0_vhcg5;
      bm01_0 <= bm01_0_vhcg6;
      bm10_0 <= bm10_0_vhcg7;
      bm11_0 <= bm11_0_vhcg8;
      bm00_1 <= bm00_1_vhcg9;
      bm01_1 <= bm01_1_vhcg10;
      bm10_1 <= bm10_1_vhcg11;
      bm11_1 <= bm11_1_vhcg12;
      pn_bm00_0 <= pn_bm00_0_vhcg13;
      pn_bm01_0 <= pn_bm01_0_vhcg14;
      pn_bm10_0 <= pn_bm10_0_vhcg15;
      pn_bm11_0 <= pn_bm11_0_vhcg16;
      pn_bm00_1 <= pn_bm00_1_vhcg17;
      pn_bm01_1 <= pn_bm01_1_vhcg18;
      pn_bm10_1 <= pn_bm10_1_vhcg19;
      pn_bm11_1 <= pn_bm11_1_vhcg20;
   END PROCESS;

   PROCESS (pn_bm00_0, pn_bm00_1, pn_bm01_0, pn_bm01_1, pn_bm10_0, pn_bm10_1, pn_bm11_0, pn_bm11_1)
      VARIABLE bm00_vhcg1_vhcg21  : std_logic_vector(BM_Width - 1 DOWNTO 0);
      VARIABLE bm01_vhcg2_vhcg22  : std_logic_vector(BM_Width - 1 DOWNTO 0);
      VARIABLE bm10_vhcg3_vhcg23  : std_logic_vector(BM_Width - 1 DOWNTO 0);
      VARIABLE bm11_vhcg4_vhcg24  : std_logic_vector(BM_Width - 1 DOWNTO 0);
   BEGIN
      bm00_vhcg1_vhcg21 := "0" & pn_bm00_0 + pn_bm00_1;
      bm01_vhcg2_vhcg22 := "0" & pn_bm01_0 + pn_bm01_1;
      bm10_vhcg3_vhcg23 := "0" & pn_bm10_0 + pn_bm10_1;
      bm11_vhcg4_vhcg24 := "0" & pn_bm11_0 + pn_bm11_1;
      bm00_vhcg1 <= bm00_vhcg1_vhcg21;
      bm01_vhcg2 <= bm01_vhcg2_vhcg22;
      bm10_vhcg3 <= bm10_vhcg3_vhcg23;
      bm11_vhcg4 <= bm11_vhcg4_vhcg24;
   END PROCESS;

END translated;
